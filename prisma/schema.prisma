// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum WorkspaceType {
  PRIVATE
  COLLAB
}

enum FolderType {
  JUST_OWNER
  SHARE
  PUBLIC
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?                @db.String
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorComfirmation?

  myWorkspaces Workspace[] @relation("owner_by")

  memberOfWorkspaceIds String[]    @db.ObjectId
  memberOfWorkspace    Workspace[] @relation("member_of", fields: [memberOfWorkspaceIds], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_as        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorComfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Workspace {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  ownerId   String        @db.ObjectId
  memberIds String[]      @db.ObjectId
  avatar    String
  type      WorkspaceType @default(PRIVATE)

  owner   User   @relation("owner_by", fields: [ownerId], references: [id], onDelete: Cascade)
  members User[] @relation("member_of", fields: [memberIds], references: [id])

  folder Folder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Folder {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  name String
  icon String     @db.String
  type FolderType @default(PUBLIC)

  workspaceId String    @db.ObjectId
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  documents Document[]
  images    Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  icon    String @db.String
  content String @db.String

  folderId String @db.ObjectId
  folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url  String @db.String

  folderId String @db.ObjectId
  folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAr DateTime @updatedAt
}
